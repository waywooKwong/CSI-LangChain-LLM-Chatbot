{"ast":null,"code":"import \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.date.to-json.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/web.timers.js\";\nexport default {\n  data: function data() {\n    return {\n      messages: [],\n      // 当前聊天内容\n      newMessage: '',\n      // 新消息输入框的内容\n      chatHistory: [] // 聊天历史记录\n    };\n  },\n  mounted: function mounted() {\n    this.loadMessages(); // 加载当前聊天记录\n    this.loadHistory(); // 加载聊天历史记录\n  },\n  methods: {\n    sendMessage: function sendMessage() {\n      var _this = this;\n      // 发送消息，将新消息添加到当前聊天记录中并清空输入框\n      if (this.newMessage.trim() !== '') {\n        this.messages.push({\n          sender: 'user',\n          text: this.newMessage\n        });\n        this.saveMessages();\n        this.newMessage = '';\n\n        // 模拟机器人回复\n        setTimeout(function () {\n          _this.messages.push({\n            sender: 'bot',\n            text: 'This is a bot response.'\n          });\n          _this.saveMessages();\n        }, 1000); // 1秒后回复\n      }\n    },\n    saveMessages: function saveMessages() {\n      // 保存当前聊天记录到 localStorage\n      localStorage.setItem('chatMessages', JSON.stringify(this.messages));\n    },\n    loadMessages: function loadMessages() {\n      // 从 localStorage 加载当前聊天记录\n      var savedMessages = localStorage.getItem('chatMessages');\n      if (savedMessages) {\n        this.messages = JSON.parse(savedMessages);\n      }\n    },\n    saveHistory: function saveHistory() {\n      // 保存当前聊天记录到聊天历史记录中，并存储到 localStorage\n      this.chatHistory.push({\n        summary: this.messages.map(function (msg) {\n          return msg.text;\n        }).join(' | '),\n        messages: this.messages\n      });\n      localStorage.setItem('chatHistory', JSON.stringify(this.chatHistory));\n    },\n    loadHistory: function loadHistory() {\n      // 从 localStorage 加载聊天历史记录\n      var savedHistory = localStorage.getItem('chatHistory');\n      if (savedHistory) {\n        this.chatHistory = JSON.parse(savedHistory);\n      }\n    },\n    clearHistory: function clearHistory() {\n      // 清除聊天历史记录\n      this.chatHistory = [];\n      localStorage.removeItem('chatHistory');\n    },\n    createNewChat: function createNewChat() {\n      // 清空当前聊天记录\n      this.messages = [];\n      this.saveMessages();\n    },\n    continueChat: function continueChat(history) {\n      // 点击历史记录条目时，将其加载为当前聊天记录\n      this.messages = history.messages;\n      this.saveMessages();\n    },\n    handleFileUpload: function handleFileUpload(event) {\n      var _this2 = this;\n      // 处理文件上传\n      var file = event.target.files[0];\n      if (file) {\n        var reader = new FileReader();\n        reader.onload = function (e) {\n          var content = e.target.result;\n          _this2.messages.push({\n            sender: 'user',\n            text: content\n          });\n          _this2.saveMessages();\n        };\n        reader.readAsText(file);\n      }\n    }\n  }\n};","map":{"version":3,"names":["data","messages","newMessage","chatHistory","mounted","loadMessages","loadHistory","methods","sendMessage","_this","trim","push","sender","text","saveMessages","setTimeout","localStorage","setItem","JSON","stringify","savedMessages","getItem","parse","saveHistory","summary","map","msg","join","savedHistory","clearHistory","removeItem","createNewChat","continueChat","history","handleFileUpload","event","_this2","file","target","files","reader","FileReader","onload","e","content","result","readAsText"],"sources":["src/views/ChatView.vue"],"sourcesContent":["<!-- eslint-disable vue/multi-word-component-names -->\r\n<template>\r\n  <div class=\"chat-container\">\r\n    <h2>Main Chat</h2>\r\n    <!-- 当前聊天历史记录 -->\r\n    <div class=\"chat-history\">\r\n      <div v-for=\"(message, index) in messages\" :key=\"index\" class=\"chat-message\">\r\n        <span :class=\"{'user-message': message.sender === 'user', 'bot-message': message.sender === 'bot'}\">{{ message.text }}</span>\r\n      </div>\r\n    </div>\r\n    <!-- 输入框和发送按钮 -->\r\n    <div class=\"input-container\">\r\n      <input v-model=\"newMessage\" @keyup.enter=\"sendMessage\" placeholder=\"Type a message...\" />\r\n      <button @click=\"sendMessage\">Send</button>\r\n      <input type=\"file\" @change=\"handleFileUpload\" />\r\n    </div>\r\n    <!-- 新建聊天按钮 -->\r\n    <button class=\"new-chat-button\" @click=\"createNewChat\">New Chat</button>\r\n    <!-- 手动保存历史记录按钮 -->\r\n    <button class=\"save-history-button\" @click=\"saveHistory\">Save Chat to History</button>\r\n    <!-- 清除历史记录按钮 -->\r\n    <button class=\"clear-history-button\" @click=\"clearHistory\">Clear History</button>\r\n    <!-- 历史聊天记录 -->\r\n    <div class=\"chat-history\">\r\n      <h3>Chat History</h3>\r\n      <div v-for=\"(history, index) in chatHistory\" :key=\"index\" class=\"chat-history-message\" @click=\"continueChat(history)\">\r\n        <span>{{ history.summary }}</span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      messages: [],        // 当前聊天内容\r\n      newMessage: '',      // 新消息输入框的内容\r\n      chatHistory: []      // 聊天历史记录\r\n    };\r\n  },\r\n  mounted() {\r\n    this.loadMessages();  // 加载当前聊天记录\r\n    this.loadHistory();   // 加载聊天历史记录\r\n  },\r\n  methods: {\r\n    sendMessage() {\r\n      // 发送消息，将新消息添加到当前聊天记录中并清空输入框\r\n      if (this.newMessage.trim() !== '') {\r\n        this.messages.push({ sender: 'user', text: this.newMessage });\r\n        this.saveMessages();\r\n        this.newMessage = '';\r\n\r\n        // 模拟机器人回复\r\n        setTimeout(() => {\r\n          this.messages.push({ sender: 'bot', text: 'This is a bot response.' });\r\n          this.saveMessages();\r\n        }, 1000); // 1秒后回复\r\n      }\r\n    },\r\n    saveMessages() {\r\n      // 保存当前聊天记录到 localStorage\r\n      localStorage.setItem('chatMessages', JSON.stringify(this.messages));\r\n    },\r\n    loadMessages() {\r\n      // 从 localStorage 加载当前聊天记录\r\n      const savedMessages = localStorage.getItem('chatMessages');\r\n      if (savedMessages) {\r\n        this.messages = JSON.parse(savedMessages);\r\n      }\r\n    },\r\n    saveHistory() {\r\n      // 保存当前聊天记录到聊天历史记录中，并存储到 localStorage\r\n      this.chatHistory.push({ summary: this.messages.map(msg => msg.text).join(' | '), messages: this.messages });\r\n      localStorage.setItem('chatHistory', JSON.stringify(this.chatHistory));\r\n    },\r\n    loadHistory() {\r\n      // 从 localStorage 加载聊天历史记录\r\n      const savedHistory = localStorage.getItem('chatHistory');\r\n      if (savedHistory) {\r\n        this.chatHistory = JSON.parse(savedHistory);\r\n      }\r\n    },\r\n    clearHistory() {\r\n      // 清除聊天历史记录\r\n      this.chatHistory = [];\r\n      localStorage.removeItem('chatHistory');\r\n    },\r\n    createNewChat() {\r\n      // 清空当前聊天记录\r\n      this.messages = [];\r\n      this.saveMessages();\r\n    },\r\n    continueChat(history) {\r\n      // 点击历史记录条目时，将其加载为当前聊天记录\r\n      this.messages = history.messages;\r\n      this.saveMessages();\r\n    },\r\n    handleFileUpload(event) {\r\n      // 处理文件上传\r\n      const file = event.target.files[0];\r\n      if (file) {\r\n        const reader = new FileReader();\r\n        reader.onload = (e) => {\r\n          const content = e.target.result;\r\n          this.messages.push({ sender: 'user', text: content });\r\n          this.saveMessages();\r\n        };\r\n        reader.readAsText(file);\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n.chat-container {\r\n  width: 400px;\r\n  margin: 0 auto;\r\n  border: 1px solid #ccc;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  background-color: #f9f9f9;\r\n}\r\n\r\n.chat-history {\r\n  height: 300px;\r\n  overflow-y: auto;\r\n  border-bottom: 1px solid #ccc;\r\n  margin-bottom: 10px;\r\n  padding-bottom: 10px;\r\n}\r\n\r\n.chat-message {\r\n  margin-bottom: 5px;\r\n  padding: 5px;\r\n  border-radius: 4px;\r\n}\r\n\r\n.user-message {\r\n  background-color: #e6e6e6;\r\n  text-align: left;\r\n}\r\n\r\n.bot-message {\r\n  background-color: #d1e7dd;\r\n  text-align: right;\r\n}\r\n\r\n.input-container {\r\n  display: flex;\r\n  margin-bottom: 10px;\r\n}\r\n\r\ninput[type=\"file\"] {\r\n  margin-left: 10px;\r\n}\r\n\r\ninput[type=\"text\"] {\r\n  flex: 1;\r\n  padding: 10px;\r\n  margin-right: 10px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n}\r\n\r\nbutton {\r\n  padding: 10px;\r\n  border: none;\r\n  background-color: #007bff;\r\n  color: #fff;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #0056b3;\r\n}\r\n\r\n.new-chat-button {\r\n  margin-top: 10px;\r\n  background-color: #28a745;\r\n}\r\n\r\n.new-chat-button:hover {\r\n  background-color: #218838;\r\n}\r\n\r\n.save-history-button {\r\n  margin-top: 10px;\r\n  background-color: #ffc107;\r\n}\r\n\r\n.save-history-button:hover {\r\n  background-color: #e0a800;\r\n}\r\n\r\n.clear-history-button {\r\n  margin-top: 10px;\r\n  background-color: #dc3545;\r\n}\r\n\r\n.clear-history-button:hover {\r\n  background-color: #c82333;\r\n}\r\n\r\n.chat-history-message {\r\n  margin-bottom: 5px;\r\n  background-color: #f1f1f1;\r\n  padding: 5px;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n}\r\n\r\n.chat-history-message:hover {\r\n  background-color: #ddd;\r\n}\r\n</style>\r\n"],"mappings":";;;;;;;;AAiCA;EACAA,IAAA,WAAAA,KAAA;IACA;MACAC,QAAA;MAAA;MACAC,UAAA;MAAA;MACAC,WAAA;IACA;EACA;EACAC,OAAA,WAAAA,QAAA;IACA,KAAAC,YAAA;IACA,KAAAC,WAAA;EACA;EACAC,OAAA;IACAC,WAAA,WAAAA,YAAA;MAAA,IAAAC,KAAA;MACA;MACA,SAAAP,UAAA,CAAAQ,IAAA;QACA,KAAAT,QAAA,CAAAU,IAAA;UAAAC,MAAA;UAAAC,IAAA,OAAAX;QAAA;QACA,KAAAY,YAAA;QACA,KAAAZ,UAAA;;QAEA;QACAa,UAAA;UACAN,KAAA,CAAAR,QAAA,CAAAU,IAAA;YAAAC,MAAA;YAAAC,IAAA;UAAA;UACAJ,KAAA,CAAAK,YAAA;QACA;MACA;IACA;IACAA,YAAA,WAAAA,aAAA;MACA;MACAE,YAAA,CAAAC,OAAA,iBAAAC,IAAA,CAAAC,SAAA,MAAAlB,QAAA;IACA;IACAI,YAAA,WAAAA,aAAA;MACA;MACA,IAAAe,aAAA,GAAAJ,YAAA,CAAAK,OAAA;MACA,IAAAD,aAAA;QACA,KAAAnB,QAAA,GAAAiB,IAAA,CAAAI,KAAA,CAAAF,aAAA;MACA;IACA;IACAG,WAAA,WAAAA,YAAA;MACA;MACA,KAAApB,WAAA,CAAAQ,IAAA;QAAAa,OAAA,OAAAvB,QAAA,CAAAwB,GAAA,WAAAC,GAAA;UAAA,OAAAA,GAAA,CAAAb,IAAA;QAAA,GAAAc,IAAA;QAAA1B,QAAA,OAAAA;MAAA;MACAe,YAAA,CAAAC,OAAA,gBAAAC,IAAA,CAAAC,SAAA,MAAAhB,WAAA;IACA;IACAG,WAAA,WAAAA,YAAA;MACA;MACA,IAAAsB,YAAA,GAAAZ,YAAA,CAAAK,OAAA;MACA,IAAAO,YAAA;QACA,KAAAzB,WAAA,GAAAe,IAAA,CAAAI,KAAA,CAAAM,YAAA;MACA;IACA;IACAC,YAAA,WAAAA,aAAA;MACA;MACA,KAAA1B,WAAA;MACAa,YAAA,CAAAc,UAAA;IACA;IACAC,aAAA,WAAAA,cAAA;MACA;MACA,KAAA9B,QAAA;MACA,KAAAa,YAAA;IACA;IACAkB,YAAA,WAAAA,aAAAC,OAAA;MACA;MACA,KAAAhC,QAAA,GAAAgC,OAAA,CAAAhC,QAAA;MACA,KAAAa,YAAA;IACA;IACAoB,gBAAA,WAAAA,iBAAAC,KAAA;MAAA,IAAAC,MAAA;MACA;MACA,IAAAC,IAAA,GAAAF,KAAA,CAAAG,MAAA,CAAAC,KAAA;MACA,IAAAF,IAAA;QACA,IAAAG,MAAA,OAAAC,UAAA;QACAD,MAAA,CAAAE,MAAA,aAAAC,CAAA;UACA,IAAAC,OAAA,GAAAD,CAAA,CAAAL,MAAA,CAAAO,MAAA;UACAT,MAAA,CAAAnC,QAAA,CAAAU,IAAA;YAAAC,MAAA;YAAAC,IAAA,EAAA+B;UAAA;UACAR,MAAA,CAAAtB,YAAA;QACA;QACA0B,MAAA,CAAAM,UAAA,CAAAT,IAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}