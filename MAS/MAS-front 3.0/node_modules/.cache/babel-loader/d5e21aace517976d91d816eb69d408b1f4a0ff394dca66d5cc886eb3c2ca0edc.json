{"ast":null,"code":"import _defineProperty from \"E:/CSI/MAS/MAS-front 3.0/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _regeneratorRuntime from \"E:/CSI/MAS/MAS-front 3.0/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"E:/CSI/MAS/MAS-front 3.0/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.date.to-json.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport Message from '@/components/Message.vue';\nimport apiClient from '@/axios';\nexport default {\n  components: {\n    Message: Message\n  },\n  data: function data() {\n    return {\n      query: '',\n      // 用户输入的消息\n      response: '',\n      // 服务器响应\n      messages: [],\n      // 消息列表\n      isSending: false,\n      // 是否正在发送消息或上传文件\n      files: [],\n      // 待上传的文件列表\n      chatHistory: [],\n      // 聊天历史记录\n      drawerVisible: false // 抽屉是否可见\n    };\n  },\n  mounted: function mounted() {\n    this.loadMessages(); // 加载当前聊天记录\n    this.loadHistory(); // 加载聊天历史记录\n  },\n  methods: _defineProperty(_defineProperty(_defineProperty(_defineProperty({\n    toggleDrawer: function toggleDrawer() {\n      this.drawerVisible = !this.drawerVisible;\n    },\n    // 处理文件上传，防止默认上传行为\n    handleFileUpload: function handleFileUpload(file) {\n      this.files.push(file);\n      return false; // 阻止默认上传行为\n    },\n    // 删除指定索引的文件\n    removeFile: function removeFile(index) {\n      this.files.splice(index, 1);\n    },\n    // 发送用户输入的消息\n    sendQuery: function sendQuery() {\n      var _this = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var res;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!(_this.query.trim() === '')) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 2:\n              // 添加用户消息到消息列表\n              _this.messages.push({\n                text: _this.query,\n                sender: 'user'\n              });\n              _this.scrollToBottom();\n              _this.isSending = true;\n              _context.prev = 5;\n              _context.next = 8;\n              return apiClient.post('/ask', {\n                query: _this.query\n              });\n            case 8:\n              res = _context.sent;\n              // 添加服务器响应到消息列表\n              _this.messages.push({\n                text: res.data.response,\n                sender: 'bot'\n              });\n              _context.next = 16;\n              break;\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](5);\n              console.error(_context.t0);\n              _this.messages.push({\n                text: '请求失败，请稍后再试。',\n                sender: 'bot'\n              });\n            case 16:\n              _context.prev = 16;\n              // 清空输入框并重置发送状态\n              _this.saveMessages();\n              _this.query = '';\n              _this.isSending = false;\n              _this.scrollToBottom();\n              return _context.finish(16);\n            case 22:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[5, 12, 16, 22]]);\n      }))();\n    },\n    // 上传文件\n    uploadFiles: function uploadFiles() {\n      var _this2 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var formData, i;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(_this2.files.length === 0)) {\n                _context2.next = 3;\n                break;\n              }\n              alert('请选择要上传的文件');\n              return _context2.abrupt(\"return\");\n            case 3:\n              _this2.isSending = true;\n              formData = new FormData();\n              for (i = 0; i < _this2.files.length; i++) {\n                formData.append('file', _this2.files[i]);\n              }\n              _context2.prev = 6;\n              _context2.next = 9;\n              return apiClient.post('/upload', formData, {\n                headers: {\n                  'Content-Type': 'multipart/form-data'\n                }\n              });\n            case 9:\n              // 上传成功消息\n              _this2.messages.push({\n                text: '文件上传成功',\n                sender: 'bot'\n              });\n              _this2.files = [];\n              _context2.next = 17;\n              break;\n            case 13:\n              _context2.prev = 13;\n              _context2.t0 = _context2[\"catch\"](6);\n              console.error(_context2.t0);\n              _this2.messages.push({\n                text: \"\\u6587\\u4EF6\\u4E0A\\u4F20\\u5931\\u8D25\\uFF0C\\u8BF7\\u7A0D\\u540E\\u518D\\u8BD5\\u3002\\u9519\\u8BEF\\u4FE1\\u606F: \".concat(_context2.t0.response ? _context2.t0.response.data : _context2.t0.message),\n                sender: 'bot'\n              });\n            case 17:\n              _context2.prev = 17;\n              _this2.isSending = false;\n              _this2.scrollToBottom();\n              return _context2.finish(17);\n            case 21:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[6, 13, 17, 21]]);\n      }))();\n    },\n    // 保存当前聊天记录到 localStorage\n    saveMessages: function saveMessages() {\n      // 保存当前聊天记录到 localStorage\n      localStorage.setItem('chatMessages', JSON.stringify(this.messages));\n    },\n    loadMessages: function loadMessages() {\n      // 从 localStorage 加载当前聊天记录\n      var savedMessages = localStorage.getItem('chatMessages');\n      if (savedMessages) {\n        this.messages = JSON.parse(savedMessages);\n      }\n    },\n    saveHistory: function saveHistory() {\n      // 保存当前聊天记录到聊天历史记录中，并存储到 localStorage\n      this.chatHistory.push({\n        summary: this.messages.map(function (msg) {\n          return msg.text;\n        }).join(' | '),\n        messages: this.messages\n      });\n      localStorage.setItem('chatHistory', JSON.stringify(this.chatHistory));\n    },\n    loadHistory: function loadHistory() {\n      // 从 localStorage 加载聊天历史记录\n      var savedHistory = localStorage.getItem('chatHistory');\n      if (savedHistory) {\n        this.chatHistory = JSON.parse(savedHistory);\n      }\n    },\n    clearHistory: function clearHistory() {\n      // 清除聊天历史记录\n      this.chatHistory = [];\n      localStorage.removeItem('chatHistory');\n    },\n    createNewChat: function createNewChat() {\n      // 清空当前聊天记录\n      this.messages = [];\n      this.saveMessages();\n    },\n    continueChat: function continueChat(history) {\n      // 点击历史记录条目时，将其加载为当前聊天记录\n      this.messages = history.messages;\n      this.saveMessages();\n    }\n  }, \"handleFileUpload\", function handleFileUpload(event) {\n    var _this3 = this;\n    // 处理文件上传\n    var file = event.target.files[0];\n    if (file) {\n      var reader = new FileReader();\n      reader.onload = function (e) {\n        var content = e.target.result;\n        _this3.messages.push({\n          sender: 'user',\n          text: content\n        });\n        _this3.saveMessages();\n      };\n      reader.readAsText(file);\n    }\n  }), \"scrollToBottom\", function scrollToBottom() {\n    var _this4 = this;\n    this.$nextTick(function () {\n      var chatWindow = _this4.$refs.chatWindow;\n      chatWindow.scrollTop = chatWindow.scrollHeight;\n    });\n  }), \"goToAgentMap\", function goToAgentMap() {\n    this.$router.push({\n      name: 'AgentMap'\n    });\n  }), \"goToGithub\", function goToGithub() {\n    window.open('https://github.com/waywooKwong/CSI-LangChain-LLM-Chatbot', '_blank');\n  })\n};","map":{"version":3,"names":["Message","apiClient","components","data","query","response","messages","isSending","files","chatHistory","drawerVisible","mounted","loadMessages","loadHistory","methods","_defineProperty","toggleDrawer","handleFileUpload","file","push","removeFile","index","splice","sendQuery","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","res","wrap","_callee$","_context","prev","next","trim","abrupt","text","sender","scrollToBottom","post","sent","t0","console","error","saveMessages","finish","stop","uploadFiles","_this2","_callee2","formData","i","_callee2$","_context2","length","alert","FormData","append","headers","concat","message","localStorage","setItem","JSON","stringify","savedMessages","getItem","parse","saveHistory","summary","map","msg","join","savedHistory","clearHistory","removeItem","createNewChat","continueChat","history","event","_this3","target","reader","FileReader","onload","e","content","result","readAsText","_this4","$nextTick","chatWindow","$refs","scrollTop","scrollHeight","goToAgentMap","$router","name","goToGithub","window","open"],"sources":["src/views/ChatView.vue"],"sourcesContent":["<template>\r\n  <div class=\"chat-main\">\r\n    <!-- 侧边栏 -->\r\n    <div class=\"side-bar\">\r\n      <div class=\"toggle-bar\">\r\n        <!-- 图标，点击后跳转到AgentMap页面 -->\r\n        <div @click=\"goToAgentMap()\" class=\"icon go-to-agent\" data-tooltip=\"Go to AgentMap\"></div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"main-content\">\r\n      <!-- 聊天窗口头部 -->\r\n      <div class=\"chat-header\">\r\n        <h2>智能对话客服</h2>\r\n        <!-- 打开抽屉按钮 -->\r\n        <el-tooltip effect=\"dark\" content=\"打开历史记录\" placement=\"bottom\">\r\n          <el-button :disabled=\"isSending\" class=\"drawer-button\" type=\"text\" @click=\"toggleDrawer\">\r\n            历史记录\r\n          </el-button>\r\n        </el-tooltip>\r\n        <!-- \"关于\"按钮，点击后跳转到GitHub -->\r\n        <el-tooltip effect=\"dark\" content=\"跳转到 GitHub 页面\" placement=\"bottom\">\r\n          <el-button :disabled=\"isSending\" class=\"about-button\" type=\"text\" @click=\"goToGithub\">\r\n            Github\r\n          </el-button>\r\n        </el-tooltip>\r\n        <el-tooltip effect=\"dark\" content=\"多Agent消息测试\" placement=\"bottom\">\r\n          <el-button :disabled=\"isSending\" class=\"about-button\" type=\"text\" @click=\"goToGithub\">\r\n            Github\r\n          </el-button>\r\n        </el-tooltip>\r\n      </div>\r\n\r\n      <div class=\"main-window\">\r\n        <!-- 聊天窗口 -->\r\n        <div class=\"chat-window\" ref=\"chatWindow\">\r\n          <!-- 遍历并渲染每条消息 -->\r\n          <Message v-for=\"(message, index) in messages\" :key=\"index\" :text=\"message.text\" :sender=\"message.sender\" />\r\n        </div>\r\n      </div>\r\n\r\n      <el-footer class=\"footer\">\r\n        <!-- 文件上传组件 -->\r\n        <el-upload class=\"upload-demo\" ref=\"upload\" action=\"\" :file-list=\"fileList\" :show-file-list=\"false\"\r\n          :before-upload=\"handleFileUpload\" :disabled=\"isSending\" multiple>\r\n          <!-- 自定义上传按钮 -->\r\n          <template v-slot:trigger>\r\n            <el-tooltip effect=\"dark\" content=\"选择文件\" placement=\"top\">\r\n              <el-button :disabled=\"isSending\">\r\n                <i class=\"el-icon-paperclip\" size: small></i>\r\n              </el-button>\r\n            </el-tooltip>\r\n          </template>\r\n        </el-upload>\r\n        <!-- 文件列表 -->\r\n        <ul class=\"file-list\">\r\n          <li v-for=\"(file, index) in files\" :key=\"index\">\r\n            {{ file.name }}\r\n            <el-button type=\"text\" @click=\"removeFile(index)\">删除</el-button>\r\n          </li>\r\n        </ul>\r\n        <!-- 消息输入框 -->\r\n        <el-input v-model=\"query\" placeholder=\"Type a message\" @keyup.enter=\"sendQuery\"\r\n          :disabled=\"isSending\"></el-input>\r\n        <!-- 发送按钮 -->\r\n        <el-button type=\"primary\" @click=\"sendQuery\" :disabled=\"isSending\">发送</el-button>\r\n        <!-- 上传文件按钮 -->\r\n        <el-button type=\"success\" @click=\"uploadFiles\" :disabled=\"isSending || files.length === 0\">上传文件</el-button>\r\n      </el-footer>\r\n    </div>\r\n\r\n    <!-- 抽屉组件 -->\r\n    <el-drawer\r\n      title=\"历史记录\"\r\n      :visible.sync=\"drawerVisible\"\r\n      direction=\"ltr\"\r\n      size=\"20%\">\r\n      <div class=\"history-contain\">\r\n        <div class=\"history-header\">\r\n          <!-- 新建聊天按钮 -->\r\n          <button class=\"new-chat-button\" @click=\"createNewChat\">新建对话</button>\r\n          <!-- 手动保存历史记录按钮 -->\r\n          <button :disabled=\"messages.length === 0\" class=\"save-history-button\" @click=\"saveHistory\">保存对话</button>\r\n          <!-- 清除历史记录按钮 -->\r\n          <button class=\"clear-history-button\" @click=\"clearHistory\">清除记录</button>\r\n        </div>\r\n        <!-- 历史聊天记录 -->\r\n        <div class=\"chat-history\">\r\n          <div v-for=\"(history, index) in chatHistory\" :key=\"index\" class=\"chat-history-message\"\r\n            @click=\"continueChat(history)\">\r\n            <span>{{ history.summary }}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </el-drawer>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Message from '@/components/Message.vue';\r\nimport apiClient from '@/axios';\r\n\r\nexport default {\r\n  components: {\r\n    Message,\r\n  },\r\n  data() {\r\n    return {\r\n      query: '', // 用户输入的消息\r\n      response: '', // 服务器响应\r\n      messages: [], // 消息列表\r\n      isSending: false, // 是否正在发送消息或上传文件\r\n      files: [], // 待上传的文件列表\r\n      chatHistory: [], // 聊天历史记录\r\n      drawerVisible: false // 抽屉是否可见\r\n    };\r\n  },\r\n  mounted() {\r\n    this.loadMessages(); // 加载当前聊天记录\r\n    this.loadHistory(); // 加载聊天历史记录\r\n  },\r\n  methods: {\r\n    toggleDrawer() {\r\n      this.drawerVisible = !this.drawerVisible;\r\n    },\r\n    // 处理文件上传，防止默认上传行为\r\n    handleFileUpload(file) {\r\n      this.files.push(file);\r\n      return false; // 阻止默认上传行为\r\n    },\r\n    // 删除指定索引的文件\r\n    removeFile(index) {\r\n      this.files.splice(index, 1);\r\n    },\r\n    // 发送用户输入的消息\r\n    async sendQuery() {\r\n      if (this.query.trim() === '') return;\r\n\r\n      // 添加用户消息到消息列表\r\n      this.messages.push({ text: this.query, sender: 'user' });\r\n      this.scrollToBottom();\r\n\r\n      this.isSending = true;\r\n\r\n      try {\r\n        // 发送请求到服务器\r\n        const res = await apiClient.post('/ask', {\r\n          query: this.query,\r\n        });\r\n        // 添加服务器响应到消息列表\r\n        this.messages.push({ text: res.data.response, sender: 'bot' });\r\n      } catch (error) {\r\n        console.error(error);\r\n        this.messages.push({ text: '请求失败，请稍后再试。', sender: 'bot' });\r\n      } finally {\r\n        // 清空输入框并重置发送状态\r\n        this.saveMessages();\r\n        this.query = '';\r\n        this.isSending = false;\r\n        this.scrollToBottom();\r\n      }\r\n    },\r\n    // 上传文件\r\n    async uploadFiles() {\r\n      if (this.files.length === 0) {\r\n        alert('请选择要上传的文件');\r\n        return;\r\n      }\r\n\r\n      this.isSending = true;\r\n\r\n      const formData = new FormData();\r\n      for (let i = 0; i < this.files.length; i++) {\r\n        formData.append('file', this.files[i]);\r\n      }\r\n\r\n      try {\r\n        // 发送文件上传请求\r\n        await apiClient.post('/upload', formData, {\r\n          headers: {\r\n            'Content-Type': 'multipart/form-data',\r\n          },\r\n        });\r\n        // 上传成功消息\r\n        this.messages.push({ text: '文件上传成功', sender: 'bot' });\r\n        this.files = [];\r\n      } catch (error) {\r\n        console.error(error)\r\n        this.messages.push({\r\n          text: `文件上传失败，请稍后再试。错误信息: ${error.response ? error.response.data : error.message\r\n            }`,\r\n          sender: 'bot'\r\n        })\r\n      } finally {\r\n        this.isSending = false\r\n        this.scrollToBottom()\r\n      }\r\n    },\r\n    // 保存当前聊天记录到 localStorage\r\n    saveMessages() {\r\n      // 保存当前聊天记录到 localStorage\r\n      localStorage.setItem('chatMessages', JSON.stringify(this.messages));\r\n    },\r\n    loadMessages() {\r\n      // 从 localStorage 加载当前聊天记录\r\n      const savedMessages = localStorage.getItem('chatMessages');\r\n      if (savedMessages) {\r\n        this.messages = JSON.parse(savedMessages);\r\n      }\r\n    },\r\n    saveHistory() {\r\n      // 保存当前聊天记录到聊天历史记录中，并存储到 localStorage\r\n      this.chatHistory.push({ summary: this.messages.map(msg => msg.text).join(' | '), messages: this.messages });\r\n      localStorage.setItem('chatHistory', JSON.stringify(this.chatHistory));\r\n    },\r\n    loadHistory() {\r\n      // 从 localStorage 加载聊天历史记录\r\n      const savedHistory = localStorage.getItem('chatHistory');\r\n      if (savedHistory) {\r\n        this.chatHistory = JSON.parse(savedHistory);\r\n      }\r\n    },\r\n    clearHistory() {\r\n      // 清除聊天历史记录\r\n      this.chatHistory = [];\r\n      localStorage.removeItem('chatHistory');\r\n    },\r\n    createNewChat() {\r\n      // 清空当前聊天记录\r\n      this.messages = [];\r\n      this.saveMessages();\r\n    },\r\n    continueChat(history) {\r\n      // 点击历史记录条目时，将其加载为当前聊天记录\r\n      this.messages = history.messages;\r\n      this.saveMessages();\r\n    },\r\n    handleFileUpload(event) {\r\n      // 处理文件上传\r\n      const file = event.target.files[0];\r\n      if (file) {\r\n        const reader = new FileReader();\r\n        reader.onload = (e) => {\r\n          const content = e.target.result;\r\n          this.messages.push({ sender: 'user', text: content });\r\n          this.saveMessages();\r\n        };\r\n        reader.readAsText(file);\r\n      }\r\n    },\r\n\r\n    // 滚动到聊天窗口底部\r\n    scrollToBottom() {\r\n      this.$nextTick(() => {\r\n        const chatWindow = this.$refs.chatWindow;\r\n        chatWindow.scrollTop = chatWindow.scrollHeight;\r\n      });\r\n    },\r\n    // 路由跳转到 AgentMap\r\n    goToAgentMap() {\r\n      this.$router.push({ name: 'AgentMap' });\r\n    },\r\n    // 跳转到 GitHub 页面\r\n    goToGithub() {\r\n      window.open('https://github.com/waywooKwong/CSI-LangChain-LLM-Chatbot', '_blank');\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import \"@/assets/fonts/index\";\r\n\r\n.chat-main {\r\n  display: flex;\r\n  height: 100%;\r\n}\r\n\r\n.main-content {\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n}\r\n\r\n.chat-header {\r\n  height: 60px;\r\n  padding: 0 10px;\r\n  background-color: rgb(126,18,110);\r\n  border-bottom: 1px solid #f4f4f4;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  position: relative;\r\n  color: white;\r\n\r\n  h2 {\r\n    margin: 0;\r\n    flex: 1;\r\n    text-align: center;\r\n  }\r\n\r\n  .drawer-button {\r\n    position: absolute;\r\n    left: 10px;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n    width: auto; /* 自动宽度适应文字 */\r\n    height: 30px; /* 自动高度适应文字 */\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    background-color: white; /* 修改背景颜色为白色 */\r\n    padding: 0;\r\n  }\r\n\r\n  .about-button {\r\n    position: absolute;\r\n    right: 10px;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n    width: auto; /* 自动宽度适应文字 */\r\n    height: 30px; /* 自动高度适应文字 */\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    background-color: white; /* 修改背景颜色为白色 */\r\n    padding: 0;\r\n  }\r\n}\r\n\r\n.main-window {\r\n  display: flex;\r\n  flex: 1;\r\n  overflow: hidden; /* 避免整个窗口的滚动条 */\r\n}\r\n\r\n.chat-window {\r\n  flex: 1;\r\n  overflow-y: auto; /* 仅对话信息框可以滚动 */\r\n  padding: 10px;\r\n  border-bottom: 1px solid #dcdfe6;\r\n}\r\n\r\n.footer {\r\n  display: flex;\r\n  padding: 10px;\r\n  background-color: #fff;\r\n  align-items: center; /* 底部水平对齐 */\r\n}\r\n\r\n.footer .el-input {\r\n  flex: 1;\r\n  margin-right: 10px;\r\n}\r\n\r\n.upload-demo {\r\n  margin-right: 10px;\r\n}\r\n\r\n.file-list {\r\n  list-style: none;\r\n  padding: 0;\r\n  margin: 0 10px 10px 0;\r\n}\r\n\r\n.file-list li {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  background-color: #f9f9f9;\r\n  padding: 5px;\r\n  border-radius: 3px;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.side-bar {\r\n  height: 100%;\r\n  max-width: 250px;\r\n  z-index: 2;\r\n  background: none;\r\n  display: flex;\r\n\r\n  .toggle-bar {\r\n    height: 100%;\r\n    width: 50px;\r\n    background: #222222;\r\n    z-index: 2;\r\n    display: flex;\r\n    flex-flow: column;\r\n    align-items: center;\r\n    padding: 13px;\r\n\r\n    .icon {\r\n      margin-bottom: 26px;\r\n      font-size: 24px;\r\n      color: #FFFFFF;\r\n      cursor: pointer;\r\n      position: relative;\r\n\r\n      &:before {\r\n        @include icon;\r\n      }\r\n\r\n      /* Tooltip styling */\r\n      &::after {\r\n        content: attr(data-tooltip);\r\n        position: absolute;\r\n        top: 50%;\r\n        left: 100%;\r\n        transform: translateY(-50%) translateX(10px); /* 右侧显示并略微偏移 */\r\n        background: #333;\r\n        color: #fff;\r\n        padding: 5px 10px;\r\n        border-radius: 4px;\r\n        white-space: nowrap;\r\n        font-size: 12px; /* 缩小字体 */\r\n        opacity: 0;\r\n        visibility: hidden;\r\n        transition: opacity 0.3s, visibility 0.3s;\r\n        z-index: 10;\r\n      }\r\n\r\n      &:hover::after {\r\n        opacity: 1;\r\n        visibility: visible;\r\n      }\r\n    }\r\n\r\n    .go-to-agent {\r\n      &:before {\r\n        content: '\\E8AF'; /* 请确保这个内容与您的字体图标设置相匹配 */\r\n      }\r\n    }\r\n\r\n    .disabled-icon {\r\n      opacity: 0.35;\r\n    }\r\n  }\r\n}\r\n\r\n.history-contain {\r\n  padding: 10px; /* 增加内边距 */\r\n  h3 {\r\n    text-align: center;\r\n    margin-bottom: 10px; /* 增加下边距 */\r\n    color: #333;\r\n  }\r\n\r\n  .history-header {\r\n    display: flex;\r\n    flex-direction: column; /* 垂直排列按钮 */\r\n    align-items: center; /* 居中对齐 */\r\n    margin-bottom: 10px; /* 增加下边距 */\r\n\r\n    button {\r\n      margin: 5px 0; /* 增加上下间距 */\r\n      padding: 5px 10px; /* 增加内边距 */\r\n      width: 100%; /* 按钮宽度为100% */\r\n      box-sizing: border-box; /* 包括内边距和边框在内的宽度和高度 */\r\n    }\r\n  }\r\n\r\n  .chat-history {\r\n    display: flex;\r\n    flex-direction: column; /* 垂直排列历史记录 */\r\n    gap: 5px; /* 增加历史记录之间的间距 */\r\n  }\r\n\r\n  .chat-history-message {\r\n    background-color: #fff;\r\n    padding: 5px;\r\n    border-radius: 5px; /* 圆角边框 */\r\n    cursor: pointer;\r\n    transition: background-color 0.3s;\r\n\r\n    &:hover {\r\n      background-color: #f5f5f5;\r\n    }\r\n  }\r\n}\r\n\r\n.el-drawer__wrapper {\r\n  .el-drawer__container {\r\n    margin-left: 50px; /* 从侧边栏展开 */\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}